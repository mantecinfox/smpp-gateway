version: '3.8'

services:
  # Banco de dados PostgreSQL para produção
  postgres:
    image: postgres:15-alpine
    container_name: smpp-postgres-prod
    environment:
      POSTGRES_DB: smpp_admin
      POSTGRES_USER: smpp_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backup:/backup
    ports:
      - "5432:5432"
    networks:
      - smpp-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smpp_user -d smpp_admin"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para produção
  redis:
    image: redis:7-alpine
    container_name: smpp-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    ports:
      - "6379:6379"
    networks:
      - smpp-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicação principal
  app:
    build: .
    container_name: smpp-app-prod
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=smpp_admin
      - DB_USER=smpp_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SMPP_HOST=${SMPP_HOST}
      - SMPP_PORT=${SMPP_PORT}
      - SMPP_SYSTEM_ID=${SMPP_SYSTEM_ID}
      - SMPP_PASSWORD=${SMPP_PASSWORD}
      - API_PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - LOG_LEVEL=info
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backup:/app/backup
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smpp-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: smpp-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-docker.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    networks:
      - smpp-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup automático
  backup:
    image: postgres:15-alpine
    container_name: smpp-backup-prod
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backup:/backup
      - ./backup.sh:/backup.sh
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - smpp-prod-network
    restart: unless-stopped
    command: >
      sh -c "
        while true; do
          pg_dump -h postgres -U smpp_user smpp_admin > /backup/smpp_admin_$(date +%Y%m%d_%H%M%S).sql
          find /backup -name '*.sql' -mtime +7 -delete
          sleep 86400
        done
      "

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  smpp-prod-network:
    driver: bridge